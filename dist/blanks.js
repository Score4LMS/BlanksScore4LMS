H5P.Blanks=function(t,e){var s="ongoing",i="checking",n="showing-solution",o="finished";function a(s,i,n){var o=this;e.call(o,"blanks"),this.contentId=i,this.contentData=n,this.params=t.extend(!0,{},{text:"Fill in",questions:["<p>Oslo is the capital of *Norway*.</p>"],overallFeedback:[],userAnswers:[],showSolutions:"Show solution",tryAgain:"Try again",checkAnswer:"Check",changeAnswer:"Change answer",notFilledOut:"Please fill in all blanks to view solution",answerIsCorrect:"':ans' is correct",answerIsWrong:"':ans' is wrong",answeredCorrectly:"Answered correctly",answeredIncorrectly:"Answered incorrectly",solutionLabel:"Correct answer:",inputLabel:"Blank input @num of @total",inputHasTipLabel:"Tip available",tipLabel:"Tip",scoreBarLabel:"You got :num out of :total points",behaviour:{enableRetry:!0,enableSolutionsButton:!0,enableCheckButton:!0,caseSensitive:!0,showSolutionsRequiresInput:!0,autoCheck:!1,separateLines:!1},a11yCheck:"Check the answers. The responses will be marked as correct, incorrect, or unanswered.",a11yShowSolution:"Show the solution. The task will be marked with its correct solution.",a11yRetry:"Retry the task. Reset all responses and start the task over again.",a11yHeader:"Checking mode",submitAnswer:"Submit"},s);for(var r=this.params.questions.length-1;r>=0;r--)this.params.questions[r]||this.params.questions.splice(r,1);this.contentData=n,void 0!==this.contentData&&void 0!==this.contentData.previousState&&(this.previousState=this.contentData.previousState),this.clozes=[],this.shiftPressed=!1,H5P.$body.keydown((function(t){16===t.keyCode&&(o.shiftPressed=!0)})).keyup((function(t){16===t.keyCode&&(o.shiftPressed=!1)})),this.labelId="h5p-blanks-instructions-"+a.idCounter,this.content=o.createQuestions();var l=o.params.media;if(l&&l.type&&l.type.library){var u=(l=l.type).library.split(" ")[0];"H5P.Image"===u?l.params.file&&o.setImage(l.params.file.path,{disableImageZooming:o.params.media.disableImageZooming||!1,alt:l.params.alt,title:l.params.title}):"H5P.Video"===u?l.params.sources&&o.setVideo(l):"H5P.Audio"===u&&l.params.files&&o.setAudio(l)}o.setIntroduction('<div id="'+this.labelId+'">'+o.params.text+"</div>"),o.setContent(o.content,{class:o.params.behaviour.separateLines?"h5p-separate-lines":""}),o.registerButtons(),o.setH5PUserState()}return a.prototype=Object.create(e.prototype),a.prototype.constructor=a,a.prototype.registerButtons=function(){var e,n=this,o=t('[data-content-id="'+n.contentId+'"].h5p-content'),a=o.parents(".h5p-container");e=0!==a.length?a.last():0!==o.length?o:t(document.body),!n.params.behaviour.autoCheck&&this.params.behaviour.enableCheckButton&&n.addButton("check-answer",n.params.checkAnswer,(function(){n.a11yHeader.innerHTML=n.params.a11yHeader,n.a11yHeader.focus(),n.toggleButtonVisibility(i),n.markResults(),n.showEvaluation(),n.triggerAnswered()}),!0,{"aria-label":n.params.a11yCheck},{confirmationDialog:{enable:n.params.behaviour.confirmCheckDialog,l10n:n.params.confirmCheck,instance:n,$parentElement:e},textIfSubmitting:n.params.submitAnswer,contentData:n.contentData}),n.addButton("show-solution",n.params.showSolutions,(function(){n.showCorrectAnswers(!1)}),n.params.behaviour.enableSolutionsButton,{"aria-label":n.params.a11yShowSolution}),!0===n.params.behaviour.enableRetry&&n.addButton("try-again",n.params.tryAgain,(function(){n.a11yHeader.innerHTML="",n.resetTask(),n.$questions.filter(":first").find("input:first").focus()}),!0,{"aria-label":n.params.a11yRetry},{confirmationDialog:{enable:n.params.behaviour.confirmRetryDialog,l10n:n.params.confirmRetry,instance:n,$parentElement:e}}),n.toggleButtonVisibility(s)},a.prototype.handleBlanks=function(t,e){for(var s,i=t.indexOf("*");-1!==i&&-1!==s;)if(i++,-1!==(s=t.indexOf("*",i))){var n=t.substring(i,s),o="";n.length?(o=e(this.parseSolution(n)),s++):i+=1,t=t.slice(0,i-1)+o+t.slice(s),s-=s-i-o.length,i=t.indexOf("*",s)}return t},a.prototype.createQuestions=function(){for(var e=this,n="",o=0,r=0;r<e.params.questions.length;r++){var l=e.params.questions[r];l=e.handleBlanks(l,(function(t){o+=1;var s=e.params.userAnswers.length>e.clozes.length?e.params.userAnswers[e.clozes.length]:null,i=new a.Cloze(t,e.params.behaviour,s,{answeredCorrectly:e.params.answeredCorrectly,answeredIncorrectly:e.params.answeredIncorrectly,solutionLabel:e.params.solutionLabel,inputLabel:e.params.inputLabel,inputHasTipLabel:e.params.inputHasTipLabel,tipLabel:e.params.tipLabel});return e.clozes.push(i),i})),n+='<div role="group" aria-labelledby="'+e.labelId+'">'+l+"</div>"}return e.hasClozes=o>0,this.$questions=t(n),e.a11yHeader=document.createElement("div"),e.a11yHeader.classList.add("hidden-but-read"),e.a11yHeader.tabIndex=-1,e.$questions[0].insertBefore(e.a11yHeader,this.$questions[0].childNodes[0]||null),this.$questions.find("input").each((function(n){var o;e.params.behaviour.autoCheck&&(o=function(){var s=t("<div>").text(this.getUserAnswer()).html();e.read((this.correct()?e.params.answerIsCorrect:e.params.answerIsWrong).replace(":ans",s)),(e.done||e.allBlanksFilledOut())&&(e.toggleButtonVisibility(i),e.showEvaluation(),e.triggerAnswered(),e.done=!0)}),e.clozes[n].setInput(t(this),o,(function(){e.toggleButtonVisibility(s),e.params.behaviour.autoCheck||e.hideEvaluation()}),n,e.clozes.length)})).keydown((function(s){var i,n,o=t(this);e.autoGrowTextField(o);var a=13===s.keyCode,r=9===s.keyCode&&e.params.behaviour.autoCheck;if((a||r)&&(i=e.$questions.find(".h5p-input-wrapper:not(.h5p-correct) .h5p-text-input"),n=o.is(i[i.length-1])),(r&&n&&!e.shiftPressed||a&&n)&&setTimeout((function(){e.focusButton()}),10),a)return n?o.trigger("blur"):i.eq(i.index(o)+1).focus(),!1})).on("change",(function(){e.answered=!0,e.triggerXAPI("interacted")})),e.on("resize",(function(){e.resetGrowTextField()})),this.$questions},a.prototype.autoGrowTextField=function(e){if(!this.params.behaviour.separateLines){var s=this,i=parseInt(e.css("font-size"),10),n=3*i,o=3.25*i,a=.5*i;setTimeout((function(){var i=t("<div>",{text:e.val()});i.css({position:"absolute","white-space":"nowrap","font-size":e.css("font-size"),"font-family":e.css("font-family"),padding:e.css("padding"),width:"initial"}),e.parent().append(i);var r=i.width(),l=s.$questions.width();i.remove(),r<=n?e.width(n+a):r+o>=l?e.width(l-o):e.width(r+a)}),1)}},a.prototype.resetGrowTextField=function(){var e=this;this.$questions.find("input").each((function(){e.autoGrowTextField(t(this))}))},a.prototype.toggleButtonVisibility=function(t){var e=this.getScore()===this.getMaxScore();this.params.behaviour.autoCheck&&e&&(t=o),this.params.behaviour.enableSolutionsButton&&(t!==i||e?this.hideButton("show-solution"):this.showButton("show-solution")),this.params.behaviour.enableRetry&&(t===i&&!e||t===n?this.showButton("try-again"):this.hideButton("try-again")),t===s?this.showButton("check-answer"):this.hideButton("check-answer"),this.trigger("resize")},a.prototype.allowSolution=function(){return!(!0===this.params.behaviour.showSolutionsRequiresInput&&!this.allBlanksFilledOut()&&(this.updateFeedbackContent(this.params.notFilledOut),this.read(this.params.notFilledOut),1))},a.prototype.allBlanksFilledOut=function(){return!this.clozes.some((function(t){return!t.filledOut()}))},a.prototype.markResults=function(){for(var t=this,e=0;e<t.clozes.length;e++)t.clozes[e].checkAnswer(),t.params.behaviour.enableRetry||t.clozes[e].disableInput();this.trigger("resize")},a.prototype.removeMarkedResults=function(){this.$questions.find(".h5p-input-wrapper").removeClass("h5p-correct h5p-wrong"),this.$questions.find(".h5p-input-wrapper > input").attr("disabled",!1),this.trigger("resize")},a.prototype.showCorrectAnswers=function(t){if(t||this.allowSolution()){this.toggleButtonVisibility(n),this.hideSolutions();for(var e=0;e<this.clozes.length;e++)this.clozes[e].showSolution();this.trigger("resize")}},a.prototype.toggleAllInputs=function(t){for(var e=0;e<this.clozes.length;e++)this.clozes[e].toggleInput(t)},a.prototype.showSolutions=function(){this.params.behaviour.enableSolutionsButton=!0,this.toggleButtonVisibility(o),this.markResults(),this.showEvaluation(),this.showCorrectAnswers(!0),this.toggleAllInputs(!1),this.hideButtons()},a.prototype.resetTask=function(){this.answered=!1,this.hideEvaluation(),this.hideSolutions(),this.clearAnswers(),this.removeMarkedResults(),this.toggleButtonVisibility(s),this.resetGrowTextField(),this.toggleAllInputs(!0),this.done=!1},a.prototype.hideButtons=function(){this.toggleButtonVisibility(o)},a.prototype.triggerAnswered=function(){this.answered=!0;var t=this.createXAPIEventTemplate("answered");this.addQuestionToXAPI(t),this.addResponseToXAPI(t),this.trigger(t)},a.prototype.getXAPIData=function(){var t=this.createXAPIEventTemplate("answered");return this.addQuestionToXAPI(t),this.addResponseToXAPI(t),{statement:t.data.statement}},a.prototype.getxAPIDefinition=function(){var t={};t.description={"en-US":this.params.text},t.type="http://adlnet.gov/expapi/activities/cmi.interaction",t.interactionType="fill-in";const e=[];let s="";for(var i=0;i<this.params.questions.length;i++){var n=this.handleBlanks(this.params.questions[i],(function(t){return e.push(t.solutions),s+=(s?"[,]":"")+t.solutions[0],"__________"}));t.description["en-US"]+=n}return t.correctResponsesPattern=["{case_matters="+this.params.behaviour.caseSensitive+"}"+s],t.extensions=t.extensions||{},t.extensions["https://h5p.org/x-api/case-sensitivity"]=this.params.behaviour.caseSensitive,t.extensions["https://h5p.org/x-api/alternatives"]=e,t},a.prototype.addQuestionToXAPI=function(e){var s=e.getVerifiedStatementValue(["object","definition"]);if(t.extend(!0,s,this.getxAPIDefinition()),this.hasAlternatives){const t=e.getVerifiedStatementValue(["context"]);t.extensions=t.extensions||{},t.extensions["https://h5p.org/x-api/h5p-reporting-version"]="1.1.0"}},a.prototype.parseSolution=function(t){var e,s,i=t.indexOf(":");-1!==i?(e=t.slice(i+1),s=t.slice(0,i)):s=t;var n=s.split("/");this.hasAlternatives=this.hasAlternatives||n.length>1;for(var o=0;o<n.length;o++){n[o]=H5P.trim(n[o]);var a=document.createElement("textarea");a.innerHTML=n[o],n[o]=a.value}return{tip:e,solutions:n}},a.prototype.addResponseToXAPI=function(t){t.setScoredResult(this.getScore(),this.getMaxScore(),this),t.data.statement.result.response=this.getxAPIResponse()},a.prototype.getxAPIResponse=function(){return this.getCurrentState().join("[,]")},a.prototype.showEvaluation=function(){var t=this.getMaxScore(),e=this.getScore(),s=H5P.Question.determineOverallFeedback(this.params.overallFeedback,e/t).replace("@score",e).replace("@total",t);this.setFeedback(s,e,t,this.params.scoreBarLabel),e===t&&this.toggleButtonVisibility(o)},a.prototype.hideEvaluation=function(){this.removeFeedback()},a.prototype.hideSolutions=function(){this.$questions.find(".h5p-correct-answer").remove()},a.prototype.getMaxScore=function(){return this.clozes.length},a.prototype.getScore=function(){for(var t=this,e=0,s=0;s<t.clozes.length;s++)t.clozes[s].correct()&&e++,t.params.userAnswers[s]=t.clozes[s].getUserAnswer();return e},a.prototype.getTitle=function(){return H5P.createTitle(this.contentData.metadata&&this.contentData.metadata.title?this.contentData.metadata.title:"Fill In")},a.prototype.clearAnswers=function(){this.clozes.forEach((function(t){t.setUserInput(""),t.resetAriaLabel()}))},a.prototype.getAnswerGiven=function(){return this.answered||!this.hasClozes},a.setFocus=function(t){setTimeout((function(){t.focus()}),1)},a.prototype.getCurrentState=function(){var t=[];return this.clozes.forEach((function(e){t.push(e.getUserAnswer())})),t},a.prototype.setH5PUserState=function(){var t=this;if(void 0!==this.previousState&&this.previousState.length&&this.previousState.length===this.clozes.length){var e=!0;this.previousState.forEach((function(s,i){s.length&&(t.answered=!0);var n=t.clozes[i];n.setUserInput(s),t.params.behaviour.autoCheck&&(n.filledOut()?n.checkAnswer():e=!1)})),t.params.behaviour.autoCheck&&e&&(t.showEvaluation(),t.toggleButtonVisibility(i))}},a.prototype.disableInput=function(){this.$questions.find("input").attr("disabled",!0)},a.idCounter=0,a}(H5P.jQuery,H5P.Question),H5P.Blanks.parseText=function(t){var e,s,i=new H5P.Blanks({question:t});return(s=t,"",e=s.replace(/<[^>]*>/g,""),e.split(/(\*.*?\*)/).filter((function(t){return t.length>0}))).map((function(t){return function(t){return"*"===t.substr(0,1)&&"*"===t.substr(-1)}(t)?{type:"answer",correct:i.parseSolution(t.slice(1,-1)).solutions}:{type:"text",content:t}}))};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,